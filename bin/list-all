#!/usr/bin/env bash

set -euo pipefail

current_script_path=${BASH_SOURCE[0]}
plugin_dir=$(dirname "$(dirname "${current_script_path}")")

# shellcheck source=../lib/utils.bash
. "${plugin_dir}/lib/utils.bash"

GIT_REMINDER_FILE="$(mktemp -t asdf_asdf-awscli_upgradegit_XXXXXX)"
GIT_REMINDER_FILE_FUZZY="${GIT_REMINDER_FILE%_*}"
GH_REPO="https://github.com/aws/aws-cli"
GIT_VERSION=$(git --version)
GIT_VERSION="${GIT_VERSION##* }"

git_supports_sort() {
  awk '{ split($0,a,"."); if ((a[1] < 2) || (a[2] < 18)) { print "1" } else { print "0" } }' <<<"$1"
}

if [ "$(git_supports_sort "${GIT_VERSION}")" -eq 0 ]; then
  rm -f "${GIT_REMINDER_FILE}"
  GIT_SUPPORTS_SORT=0
else
  GIT_SUPPORTS_SORT=1
  if [ ! -f "${GIT_REMINDER_FILE_FUZZY}" ]; then
    printf "consider upgrading git to a version >= 2.18.0 for faster asdf - you have v%s\n" "${GIT_VERSION}"
    touch "${GIT_REMINDER_FILE_FUZZY}"
  fi
fi

# NOTE: This is a fallback for if the user's installed version of git doesn't support sorting.
sort_versions() {
  sed 'h; s/[+-]/./g; s/.p\([[:digit:]]\)/.z\1/; s/$/.z/; G; s/\n/ /' |
    LC_ALL=C sort -t. -k 1,1 -k 2,2n -k 3,3n -k 4,4n -k 5,5n | awk '{print $2}'
}

list_github_tags() {
  git ls-remote --tags --refs "${GH_REPO}" |
    grep -o 'refs/tags/.*' | cut -d/ -f3- |
    sed 's/^v//'
}

list_remote_tags() {
  if [ "${GIT_SUPPORTS_SORT}" -eq 0 ]; then
    git -c 'versionsort.suffix=a' -c 'versionsort.suffix=b' \
      -c 'versionsort.suffix=r' -c 'versionsort.suffix=p' \
      -c 'versionsort.suffix=-' -c 'versionsort.suffix=_' \
      ls-remote --exit-code --tags --refs --sort="version:refname" "${GH_REPO}" |
      awk -F'[/v]' '$NF ~ /^[0-9]+.*/ { print $NF }' || fail "no releases found"
  else
    git ls-remote --exit-code --tags --refs "${GH_REPO}" |
      awk -F'[/v]' '$NF ~ /^[0-9]+.*/ { print $NF }' || fail "no releases found"
  fi
}

list_all_versions() {
  if [ "${GIT_SUPPORTS_SORT}" -eq 0 ]; then
    list_remote_tags
  else
    list_remote_tags | sort_versions
  fi
}

list_all_versions | xargs echo
