#!/usr/bin/env bash

set -euo pipefail

current_script_path=${BASH_SOURCE[0]}
plugin_dir=$(dirname "$(dirname "${current_script_path}")")

# shellcheck source=../lib/utils.bash
. "${plugin_dir}/lib/utils.bash"

GH_REPO="https://github.com/aws/aws-cli"
# shellcheck disable=2207
GIT_VERSION_STRING=($(git --version))
# shellcheck disable=2206
GIT_VERSION=(${GIT_VERSION_STRING[2]//./ })
GIT_MAJOR_VERSION="${GIT_VERSION[0]}"
GIT_MINOR_VERSION="${GIT_VERSION[1]}"

# need git 2.18.0+ for version sorting
if [ "${GIT_MAJOR_VERSION}" -ge 2 ] && [ "${GIT_MINOR_VERSION}" -ge 18 ]; then
	GIT_SUPPORTS_SORT=0
else
	GIT_SUPPORTS_SORT=1
	GIT_REMINDER_FILE="$(mktemp -t asdf_asdf-awscli_upgradegit_XXXXXX)"
	GIT_REMINDER_FILE_FUZZY="${GIT_REMINDER_FILE%_*}"
	if [ ! -f "${GIT_REMINDER_FILE_FUZZY}" ]; then
		printfn "consider upgrading git to a version >= 2.18.0 for faster asdf - you have v${GIT_VERSION_STRING[2]}"
		touch "${GIT_REMINDER_FILE_FUZZY}"
	fi
fi

# NOTE: This is a fallback for if the user's installed version of git doesn't support sorting.
sort_versions() {
	sed 'h; s/[+-]/./g; s/.p\([[:digit:]]\)/.z\1/; s/$/.z/; G; s/\n/ /' |
		LC_ALL=C sort -t. -k 1,1 -k 2,2n -k 3,3n -k 4,4n -k 5,5n | awk '{print $2}'
}

list_remote_tags() {
	if [ "${GIT_SUPPORTS_SORT}" -eq 0 ]; then
		git -c 'versionsort.suffix=a' -c 'versionsort.suffix=b' \
			-c 'versionsort.suffix=r' -c 'versionsort.suffix=p' \
			-c 'versionsort.suffix=-' -c 'versionsort.suffix=_' \
			ls-remote --exit-code --tags --refs --sort="version:refname" "${GH_REPO}" |
			awk -F'[/v]' '$NF ~ /^[0-9]+.*/ { printf "%s%s", (NR==1 ? "" : " "), $NF } END { print "" }' || fail "no releases found"
	else
		git ls-remote --exit-code --tags --refs "${GH_REPO}" |
			awk -F'[/v]' '$NF ~ /^[0-9]+.*/ { print $NF }' || fail "no releases found"
	fi
}

list_all_versions() {
	if [ "${GIT_SUPPORTS_SORT}" -eq 0 ]; then
		list_remote_tags
	else
		list_remote_tags | sort_versions
	fi
}

list_all_versions
